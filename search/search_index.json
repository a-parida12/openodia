{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":true,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Get started \u00b6 Installation \u00b6 Setup the library from Pypi using the following command in your terminal or command prompt. pip install openodia Features \u00b6 The tools are available in Odia language. Odia Alphabets Generate random Odia names Detect Odia Language Word Tokenizer Remove stopwords Google Translate Automatic extractive text summarization Add Dictionary corpus Add English-Odia Parallel corpus Add Odia Monolingual corpus Add NER dataset of places, actors, etc. Robust paragraph to sentence tokenizer covering edge cases Stemming tool Customized stopword support Add OdiaBert Improve the CI/CD pipeline Odia alphabets \u00b6 To get the Odia alphabets use the alphabet module >>> from openodia import alphabet >>> alphabet . all_letters [ '\u0b01' , '\u0b02' , '\u0b03' , '\u0b05' , '\u0b06' , '\u0b07' , '\u0b08' , '\u0b09' , '\u0b0a' , '\u0b0b' , '\u0b0c' , '\u0b0f' , '\u0b10' , '\u0b13' , '\u0b14' , '\u0b15' , '\u0b16' , '\u0b17' , '\u0b18' , '\u0b19' , '\u0b1a' , '\u0b1b' , '\u0b1c' , '\u0b1d' , '\u0b1e' , '\u0b1f' , '\u0b20' , '\u0b21' , '\u0b22' , '\u0b23' , '\u0b24' , '\u0b25' , '\u0b26' , '\u0b27' , '\u0b28' , '\u0b2a' , '\u0b2b' , '\u0b2c' , '\u0b2d' , '\u0b2e' , '\u0b2f' , '\u0b30' , '\u0b32' , '\u0b33' , '\u0b35' , '\u0b36' , '\u0b37' , '\u0b38' , '\u0b39' , '\u0b3c' , '\u0b3d' , '\u0b3e' , '\u0b3f' , '\u0b40' , '\u0b41' , '\u0b42' , '\u0b43' , '\u0b44' , '\u0b47' , '\u0b48' , '\u0b4b' , '\u0b4c' , '\u0b4d' , '\u0b56' , '\u0b57' , '\u0b21\u0b3c' , '\u0b22\u0b3c' , '\u0b5f' , '\u0b60' , '\u0b61' , '\u0b62' , '\u0b63' , '\u0b66' , '\u0b67' , '\u0b68' , '\u0b69' , '\u0b6a' , '\u0b6b' , '\u0b6c' , '\u0b6d' , '\u0b6e' , '\u0b6f' , '\u0b70' , '\u0b71' , '\u0b72' ] >>> alphabet . consonants [ '\u0b15' , '\u0b16' , '\u0b17' , '\u0b18' , '\u0b19' , '\u0b1a' , '\u0b1b' , '\u0b1c' , '\u0b1d' , '\u0b1e' , '\u0b1f' , '\u0b20' , '\u0b21' , '\u0b22' , '\u0b23' , '\u0b24' , '\u0b25' , '\u0b26' , '\u0b27' , '\u0b28' , '\u0b2a' , '\u0b2b' , '\u0b2c' , '\u0b2d' , '\u0b2e' , '\u0b2f' , '\u0b30' , '\u0b32' , '\u0b33' , '\u0b35' , '\u0b36' , '\u0b37' , '\u0b38' , '\u0b39' ] >>> alphabet . vowels [ '\u0b05' , '\u0b06' , '\u0b07' , '\u0b08' , '\u0b09' , '\u0b0a' , '\u0b0b' , '\u0b0c' , '\u0b0f' , '\u0b10' , '\u0b13' , '\u0b14' ] >>> alphabet . numbers [ '\u0b66' , '\u0b67' , '\u0b68' , '\u0b69' , '\u0b6a' , '\u0b6b' , '\u0b6c' , '\u0b6d' , '\u0b6e' , '\u0b6f' ] >>> alphabet . matra [ '\u0b01' , '\u0b02' , '\u0b03' , '\u0b3c' , '\u0b3d' , '\u0b3e' , '\u0b3f' , '\u0b40' , '\u0b41' , '\u0b42' , '\u0b43' , '\u0b44' , '\u0b47' , '\u0b48' , '\u0b4b' , '\u0b4c' , '\u0b4d' , '\u0b56' , '\u0b57' , '\u0b70' , '\u0b71' , '\u0b72' ] Odia names \u00b6 You can generate Odia names using the name module with the following syntax: >>> from openodia import name >>> name . generate_names () [ '\u0b2f\u0b26\u0b41\u0b2e\u0b23\u0b40 \u0b2e\u0b3e\u0b22\u0b3c\u0b40' , '\u0b2c\u0b3e\u0b38\u0b28\u0b4d\u0b24\u0b3f \u0b2c\u0b4d\u0b30\u0b39\u0b4d\u0b2e\u0b3e' , '\u0b2a\u0b4d\u0b30\u0b2c\u0b40\u0b23 \u0b38\u0b3f\u0b02\u0b39 \u0b2e\u0b41\u0b15\u0b4d\u0b15\u0b3f\u0b2e' , '\u0b2c\u0b43\u0b28\u0b4d\u0b26\u0b3e\u0b2c\u0b28 \u0b27\u0b33' , '\u0b05\u0b36\u0b4d\u0b71\u0b3f\u0b28\u0b40 \u0b15\u0b3f\u0b36\u0b4b\u0b30 \u0b1c\u0b17\u0b26\u0b47\u0b2c' , '\u0b36\u0b4d\u0b30\u0b40\u0b2f\u0b41\u0b15\u0b4d\u0b24 \u0b07\u0b30\u0b3e\u0b36\u0b3f\u0b37 \u0b38\u0b47\u0b20\u0b40' , '\u0b15\u0b41\u0b2e\u0b3e\u0b30\u0b40 \u0b38\u0b41\u0b2e\u0b28 \u0b38\u0b3f\u0b02\u0b26\u0b47\u0b13' , '\u0b38\u0b32\u0b3f\u0b32 \u0b05\u0b32\u0b4d\u0b32\u0b40 \u0b1b\u0b24\u0b4d\u0b30\u0b3f\u0b06' , '\u0b26\u0b3f\u0b2c\u0b3e\u0b15\u0b30\u0b28\u0b3e\u0b25 \u0b30\u0b3e\u0b27\u0b3e\u0b30\u0b3e\u0b23\u0b40 \u0b06\u0b1a\u0b3e\u0b30\u0b4d\u0b2f\u0b4d\u0b5f' , '\u0b26\u0b41\u0b30\u0b4d\u0b17\u0b3e \u0b38\u0b41\u0b28\u0b4d\u0b26\u0b30\u0b38\u0b41\u0b30\u0b4d\u0b2f\u0b4d\u0b5f\u0b3e \u0b2a\u0b41\u0b1f\u0b40' ] - By default it will return ten randomly generated names. - If you want, you can generate more names by providing the number of names needed in the first argument. >>> name . generate_names ( 20 ) [ '\u0b38\u0b3e\u0b2c\u0b3f\u0b24\u0b4d\u0b30\u0b40 \u0b27\u0b33' , '\u0b36\u0b4d\u0b30\u0b40\u0b2f\u0b41\u0b15\u0b4d\u0b24 \u0b09\u0b24\u0b4d\u0b15\u0b33 \u0b2a\u0b3e\u0b33' , '\u0b2f\u0b26\u0b41\u0b2e\u0b23\u0b3f \u0b38\u0b41\u0b2c\u0b3e\u0b39\u0b41' , '\u0b2a\u0b4d\u0b30\u0b47\u0b2e\u0b32\u0b24\u0b3e \u0b2a\u0b2e' , '\u0b17\u0b41\u0b30\u0b41 \u0b2a\u0b43\u0b37\u0b4d\u0b1f\u0b3f' , '\u0b17\u0b40\u0b24\u0b3e \u0b26\u0b3e\u0b38\u0b2c\u0b30\u0b4d\u0b2e\u0b3e' , '\u0b15\u0b41\u0b2e\u0b3e\u0b30\u0b40 \u0b26\u0b41\u0b30\u0b4d\u0b17\u0b3e \u0b2c\u0b4d\u0b30\u0b39\u0b4d\u0b2e\u0b3e' , '\u0b15\u0b41\u0b2e\u0b3e\u0b30\u0b40 \u0b2a\u0b41\u0b2a\u0b41\u0b32 \u0b39\u0b47\u0b2e\u0b4d\u0b2c\u0b4d\u0b30\u0b2e' , '\u0b2e\u0b15\u0b30 \u0b38\u0b3e\u0b07' , '\u0b32\u0b15\u0b4d\u0b37\u0b4d\u0b2e\u0b40\u0b15\u0b3e\u0b28\u0b4d\u0b24 \u0b28\u0b28\u0b4d\u0b26\u0b3f' , '\u0b36\u0b4d\u0b30\u0b40 \u0b26\u0b40\u0b28\u0b2c\u0b28\u0b4d\u0b27\u0b41 \u0b32\u0b4b\u0b15' , '\u0b15\u0b41\u0b2e\u0b3e\u0b30\u0b40 \u0b1c\u0b3f\u0b28\u0b3e \u0b17\u0b1c\u0b2a\u0b24\u0b3f' , '\u0b2e\u0b43\u0b23\u0b3e\u0b33 \u0b2d\u0b42\u0b37\u0b23 \u0b1b\u0b24\u0b4d\u0b30\u0b3f\u0b06' , '\u0b38\u0b41\u0b27\u0b3e\u0b02\u0b36\u0b41\u0b2e\u0b3e\u0b33\u0b3f\u0b28\u0b40 \u0b38\u0b3f\u0b02\u0b39 \u0b38\u0b3e\u0b32\u0b41\u0b1c\u0b3e' , '\u0b38\u0b41\u0b27\u0b3e\u0b02\u0b36\u0b41\u0b2e\u0b3e\u0b33\u0b3f\u0b28\u0b40 \u0b2e\u0b39\u0b3e\u0b28\u0b28\u0b4d\u0b26' , '\u0b38\u0b41\u0b2e\u0b28\u0b40 \u0b28\u0b3e\u0b25' , '\u0b15\u0b41\u0b2e\u0b3e\u0b30\u0b40 \u0b28\u0b40\u0b24\u0b41 \u0b39\u0b3f\u0b15\u0b4d\u0b15\u0b3e' , '\u0b36\u0b4d\u0b30\u0b40\u0b2e\u0b24\u0b40 \u0b32\u0b40\u0b33\u0b3e \u0b15\u0b3e\u0b21\u0b3e\u0b2e\u0b4d' , '\u0b38\u0b28\u0b3e\u0b24\u0b28 \u0b15\u0b41\u0b05\u0b01\u0b30' , '\u0b15\u0b41\u0b2e\u0b3e\u0b30\u0b40 \u0b15\u0b2c\u0b3f \u0b26\u0b3e\u0b38\u0b28\u0b3e\u0b5f\u0b15' ] - In addition to this, you can create specific name parts like prefix, first name, middle name, surname, etc. - By default you will get ten names. However, to get more number of results you can specify the number of names in the first argument. >>> from openodia import name >>> name . generate_firstnames () [ '\u0b05\u0b28\u0b3f\u0b30\u0b41\u0b26\u0b4d\u0b27' , '\u0b26\u0b47\u0b2c\u0b30\u0b3e\u0b1c' , '\u0b06\u0b36\u0b4d\u0b30\u0b3f\u0b24' , '\u0b2c\u0b26\u0b4d\u0b30\u0b3f' , '\u0b38\u0b26\u0b3e\u0b36\u0b3f\u0b2c' , '\u0b2a\u0b4d\u0b30\u0b26\u0b3f\u0b2a\u0b4d\u0b24' , '\u0b27\u0b43\u0b2c' , '\u0b36\u0b4d\u0b30\u0b40\u0b28\u0b3e\u0b25' , '\u0b38\u0b4d\u0b28\u0b3f\u0b24\u0b3f' , '\u0b2a\u0b4d\u0b30\u0b15\u0b43\u0b24\u0b3f' ] >>> name . generate_prefixes () [ '\u0b36\u0b4d\u0b30\u0b40\u0b2f\u0b41\u0b15\u0b4d\u0b24' , '\u0b36\u0b4d\u0b30\u0b40\u0b2e\u0b24\u0b40' , '\u0b15\u0b41\u0b2e\u0b3e\u0b30\u0b40' , '\u0b36\u0b4d\u0b30\u0b40\u0b2e\u0b3e\u0b28' , '\u0b38\u0b41\u0b36\u0b4d\u0b30\u0b40' , '\u0b36\u0b4d\u0b30\u0b40' ] >>> name . generate_middlenames () [ '\u0b32\u0b47\u0b16\u0b3e' , '\u0b36\u0b4d\u0b30\u0b40' , '\u0b2e\u0b3e\u0b27\u0b2c' , '\u0b15\u0b47\u0b24\u0b28' , '\u0b2f\u0b4b\u0b36\u0b47\u0b2b\u0b4d' , '\u0b15\u0b47\u0b36\u0b30\u0b40' , '\u0b2d\u0b42\u0b37\u0b23' , '\u0b30\u0b3e\u0b27\u0b3e\u0b30\u0b3e\u0b23\u0b40' , '\u0b2e\u0b3e\u0b28\u0b38\u0b3f\u0b02\u0b39' , '\u0b15\u0b3f\u0b36\u0b4b\u0b30' ] >>> name . generate_surnames () [ '\u0b2a\u0b30\u0b3f\u0b1c\u0b3e' , '\u0b30\u0b23\u0b38\u0b3f\u0b02\u0b39' , '\u0b2e\u0b39\u0b3e\u0b2a\u0b3e\u0b24\u0b4d\u0b30' , '\u0b30\u0b25' , '\u0b2e\u0b39\u0b28\u0b4d\u0b24' , '\u0b2c\u0b47\u0b39\u0b47\u0b30\u0b3e' , '\u0b26\u0b47\u0b13' , '\u0b27\u0b33' , '\u0b26\u0b3f\u0b06\u0b28' , '\u0b39\u0b3f\u0b2e\u0b3f\u0b30\u0b3f\u0b15\u0b3e' ] Detect Odia Language \u00b6 A binary language classification method used which will return if the input text is in Odia language or in any other non-Odia language. Along with this a confidence score also returned. The score provides how confident the library is that it is Odia or Non-Odia. There is a threshold parameter to the method which can be configured to tune the confidence score threshold after which it will be regarded as Odia. The default value is 0.5. >>> from openodia import ud >>> ud . detect_language ( \"hey how are you?\" ) { 'language' : 'non-odia' , 'confidence_score' : 1.0 } >>> ud . detect_language ( \"hey how are you? \u0b28\u0b4d\u0b5f\u0b3e\u0b1a\u0b41\u0b30\u0b3e\u0b32 \u0b32\u0b3e\u0b19\u0b4d\u0b17\u0b41\u0b0f\u0b1c \u0b2a\u0b4d\u0b30\u0b4b\u0b38\u0b47\u0b38\u0b3f\u0b02\" ) { 'language' : 'odia' , 'confidence_score' : 0.66666 } >>> ud . detect_language ( \"hey how are you? \u0b28\u0b4d\u0b5f\u0b3e\u0b1a\u0b41\u0b30\u0b3e\u0b32 \u0b32\u0b3e\u0b19\u0b4d\u0b17\u0b41\u0b0f\u0b1c \u0b2a\u0b4d\u0b30\u0b4b\u0b38\u0b47\u0b38\u0b3f\u0b02\" , threshold = 0.7 ) { 'language' : 'non-odia' , 'confidence_score' : 0.333333 } >>> ud . detect_language ( \"\u0b28\u0b4d\u0b5f\u0b3e\u0b1a\u0b41\u0b30\u0b3e\u0b32 \u0b32\u0b3e\u0b19\u0b4d\u0b17\u0b41\u0b0f\u0b1c \u0b2a\u0b4d\u0b30\u0b4b\u0b38\u0b47\u0b38\u0b3f\u0b02 \u0b2c\u0b3e \u0b2a\u0b4d\u0b30\u0b3e\u0b15\u0b43\u0b24\u0b3f\u0b15 \u0b2d\u0b3e\u0b37\u0b3e \u0b2a\u0b4d\u0b30\u0b15\u0b4d\u0b30\u0b3f\u0b5f\u0b3e\u0b15\u0b30\u0b23 \u0b15\u0b02\u0b2a\u0b4d\u0b5f\u0b41\u0b1f\u0b30 \u0b2c\u0b3f\u0b1c\u0b4d\u0b1e\u0b3e\u0b28 \u0b0f\u0b2c\u0b02 \u0b06\u0b30\u0b4d\u0b1f\u0b3f\u0b2b\u0b3f\u0b38\u0b3f\u0b06\u0b32 \u0b07\u0b23\u0b4d\u0b1f\u0b47\u0b32\u0b3f\u0b1c\u0b47\u0b28\u0b4d\u0b38\u0b30 \u0b38\u0b47\u0b39\u0b3f \u0b2c\u0b3f\u0b2d\u0b3e\u0b17\u0b15\u0b41 \u0b15\u0b41\u0b39\u0b3e\u0b2f \u0b3e\u0b0f \u0b2f\u0b3e\u0b39\u0b3e \u0b2e\u0b28\u0b41\u0b37\u0b4d\u0b5f\u0b30 \u0b2d\u0b3e\u0b37\u0b3e\u0b17\u0b41\u0b21\u0b3c\u0b3f\u0b15 \u0b38\u0b39 \u0b15\u0b2e\u0b4d\u0b2a\u0b4d\u0b5f\u0b41\u0b1f\u0b30\u0b30 \u0b15\u0b25\u0b3e\u0b2c\u0b3e\u0b30\u0b4d\u0b24\u0b4d\u0b24\u0b3e\u0b15\u0b41 \u0b2c\u0b41\u0b1d\u0b3e\u0b07\u0b25\u0b3e\u0b0f\u0964 \" ) { 'language' : 'odia' , 'confidence_score' : 0.99404 } Word Tokenizer \u00b6 To tokenize odia text into multiple words or tokens word_tokenizer module can be used. >>> from openodia import ud >>> ud . word_tokenizer ( \"\u0b15\u0b4d\u0b71\u0b3e\u0b23\u0b4d\u0b1f\u0b2e \u0b15\u0b2e\u0b4d\u0b2a\u0b4d\u0b5f\u0b41\u0b1f\u0b3f\u0b19\u0b4d\u0b17, \u0b39\u0b47\u0b09\u0b1b\u0b3f \u0b0f\u0b15 \u0b09\u0b26\u0b40\u0b5f\u0b2e\u0b3e\u0b28 \u0b39\u0b3e\u0b30\u0b4d\u0b21\u0b3c\u0b71\u0b47\u0b30 \u0b0f\u0b2c\u0b02 \u0b38\u0b2b\u0b4d\u0b1f\u0b71\u0b47\u0b30\u0b30 \u0b2a\u0b4d\u0b30\u0b2f\u0b41\u0b15\u0b4d\u0b24\u0b3f\u0b2c\u0b3f\u0b26\u0b4d\u0b5f\u0b3e, \u0b2f\u0b3e\u0b39\u0b3e \u0b15\u0b20\u0b3f\u0b28 \u0b17\u0b3e\u0b23\u0b3f\u0b24\u0b3f\u0b15 \u0b38\u0b2e\u0b38\u0b4d\u0b5f\u0b3e\u0b17\u0b41\u0b21\u0b3c\u0b3f\u0b15\u0b30 \u0b38\u0b2e\u0b3e\u0b27\u0b3e\u0b28 \u0b2a\u0b3e\u0b07\u0b01 \u0b09\u0b2a-\u0b2a\u0b3e\u0b30\u0b2e\u0b3e\u0b23\u0b2c\u0b3f\u0b15 \u0b18\u0b1f\u0b23\u0b3e\u0b17\u0b41\u0b21\u0b3c\u0b3f\u0b15\u0b30 \u0b09\u0b2a\u0b2f\u0b4b\u0b17 \u0b15\u0b30\u0b3f\u0b25\u0b3e\u0b0f \u0964[\u0b67]\" ) [ '\u0b15\u0b4d\u0b71\u0b3e\u0b23\u0b4d\u0b1f\u0b2e' , '\u0b15\u0b2e\u0b4d\u0b2a\u0b4d\u0b5f\u0b41\u0b1f\u0b3f\u0b19\u0b4d\u0b17' , '\u0b39\u0b47\u0b09\u0b1b\u0b3f' , '\u0b0f\u0b15' , '\u0b09\u0b26\u0b40\u0b5f\u0b2e\u0b3e\u0b28' , '\u0b39\u0b3e\u0b30\u0b4d\u0b21\u0b3c\u0b71\u0b47\u0b30' , '\u0b0f\u0b2c\u0b02' , '\u0b38\u0b2b\u0b4d\u0b1f\u0b71\u0b47\u0b30\u0b30' , '\u0b2a\u0b4d\u0b30\u0b2f\u0b41\u0b15\u0b4d\u0b24\u0b3f\u0b2c\u0b3f\u0b26\u0b4d\u0b5f\u0b3e' , '\u0b2f\u0b3e\u0b39\u0b3e' , '\u0b15\u0b20\u0b3f\u0b28' , '\u0b17\u0b3e\u0b23\u0b3f\u0b24\u0b3f\u0b15' , '\u0b38\u0b2e\u0b38\u0b4d\u0b5f\u0b3e\u0b17\u0b41\u0b21\u0b3c\u0b3f\u0b15\u0b30' , '\u0b38\u0b2e\u0b3e\u0b27\u0b3e\u0b28' , '\u0b2a\u0b3e\u0b07\u0b01' , '\u0b09\u0b2a' , '\u0b2a\u0b3e\u0b30\u0b2e\u0b3e\u0b23\u0b2c\u0b3f\u0b15' , '\u0b18\u0b1f\u0b23\u0b3e\u0b17\u0b41\u0b21\u0b3c\u0b3f\u0b15\u0b30' , '\u0b09\u0b2a\u0b2f\u0b4b\u0b17' , '\u0b15\u0b30\u0b3f\u0b25\u0b3e\u0b0f' , '\u0964' , '\u0b67' ] Sentence Tokenizer \u00b6 Tokenize a paragraph into multiple sentences. Only working on full stop. >>> from openodia import ud >>> ud . sentence_tokenizer () Remove stopwords \u00b6 Frequently occurring words in a language are called as stopwords . Using the below function you can remove the stopwords. Internally this method calls the word_tokenize method to get tokens from the text. As most of the time processing happens in list by default a list of strings will be returned. >>> from openodia import ud >>> ud . remove_stopwords ( \"\u0b30\u0b3e\u0b2e \u0b13 \u0b38\u0b40\u0b24\u0b3e \u0b06\u0b2e\u0b15\u0b41 \u0b06\u0b36\u0b40\u0b30\u0b4d\u0b2c\u0b3e\u0b26 \u0b26\u0b47\u0b07\u0b1b\u0b28\u0b4d\u0b24\u0b3f\" ) [ '\u0b30\u0b3e\u0b2e' , '\u0b38\u0b40\u0b24\u0b3e' , '\u0b06\u0b2e\u0b15\u0b41' , '\u0b06\u0b36\u0b40\u0b30\u0b4d\u0b2c\u0b3e\u0b26' ] >>> ud . remove_stopwords ( \"\u0b30\u0b3e\u0b2e \u0b13 \u0b38\u0b40\u0b24\u0b3e \u0b06\u0b2e\u0b15\u0b41 \u0b06\u0b36\u0b40\u0b30\u0b4d\u0b2c\u0b3e\u0b26 \u0b26\u0b47\u0b07\u0b1b\u0b28\u0b4d\u0b24\u0b3f \" , get_str = True ) '\u0b30\u0b3e\u0b2e \u0b38\u0b40\u0b24\u0b3e \u0b06\u0b2e\u0b15\u0b41 \u0b06\u0b36\u0b40\u0b30\u0b4d\u0b2c\u0b3e\u0b26' Here the stopwords \u0b13 and \u0b26\u0b47\u0b07\u0b1b\u0b28\u0b4d\u0b24\u0b3f are removed from the text. Translation \u00b6 The translation module is a wrapper on top of Google Translate API. There are two translation methods provided: odia_to_other_lang and other_lang_to_odia other_lang_to_odia \u00b6 As the name suggests this function can be used to translate from any other language to Odia language. If you are translating from any other language other than English, please provide the language code of it. >>> from openodia import other_lang_to_odia , odia_to_other_lang >>> other_lang_to_odia ( \"hello! feeling good?\" ) '\u0b28\u0b2e\u0b38\u0b4d\u0b15\u0b3e\u0b30!\u0b2d\u0b32 \u0b32\u0b3e\u0b17\u0b41\u0b1b\u0b3f?' >>> other_lang_to_odia ( \"\u0936\u0947\u092f\u0930 \u092c\u093e\u091c\u093c\u093e\u0930 \u090f\u0915 \u0910\u0938\u093e \u092c\u093e\u091c\u093c\u093e\u0930 \u0939\u0948 \u091c\u0939\u093e\u0901 \u0915\u0902\u092a\u0928\u093f\u092f\u094b\u0902 \u0915\u0947 \u0936\u0947\u092f\u0930 \u0916\u0930\u0940\u0926\u0947-\u092c\u0947\u091a\u0947 \u091c\u093e \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\" , source_language = \"hi\" ) '\u0b37\u0b4d\u0b1f\u0b15\u0b4d \u0b2e\u0b3e\u0b30\u0b4d\u0b15\u0b47\u0b1f\u0b4d \u0b39\u0b47\u0b09\u0b1b\u0b3f \u0b0f\u0b15 \u0b2c\u0b1c\u0b3e\u0b30 \u0b2f\u0b47\u0b09\u0b01\u0b20\u0b3e\u0b30\u0b47 \u0b15\u0b2e\u0b4d\u0b2a\u0b3e\u0b28\u0b40\u0b17\u0b41\u0b21\u0b3f\u0b15 \u0b15\u0b3f\u0b23\u0b3e\u0b2f\u0b3e\u0b07\u0b2a\u0b3e\u0b30\u0b3f\u0b2c |' odia_to_other_lang \u00b6 This function can be used to translate an Odia text into another language. The same language code you can choose from as provided above. By default the function will trasnlate to English language. >>> odia_to_other_lang ( \"\u0b28\u0b2e\u0b38\u0b4d\u0b15\u0b3e\u0b30!\u0b2d\u0b32 \u0b32\u0b3e\u0b17\u0b41\u0b1b\u0b3f?\" ) 'Hello! Sounds good?' Automatic extractive text summarization \u00b6 Extracts the important summary snippet of a given text. >>> from openodia import WordFrequency >>> wf = WordFrequency ( text = \"\u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b30\u0b4d\u0b2c\u0b4b\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f, \u0b2d\u0b3e\u0b30\u0b24\u0b30 \u0b09\u0b1a\u0b4d\u0b1a\u0b24\u0b2e \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3f\u0b15 \u0b05\u0b28\u0b41\u0b37\u0b4d\u0b20\u0b3e\u0b28 \u0b05\u0b1f\u0b47 \u0b0f\u0b2c\u0b02 \u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28 \u0b05\u0b27\u0b40\u0b28\u0b38\u0b4d\u0b25 \" \"\u0b38\u0b30\u0b4d\u0b2c\u0b4b\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b05\u0b1f\u0b47 \u0964 \" \"\u0b0f\u0b39\u0b3e \u0b38\u0b30\u0b4d\u0b2c \u0b2c\u0b30\u0b3f\u0b37\u0b4d\u0b20 \u0b38\u0b3e\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28\u0b3f\u0b15 \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b05\u0b1f\u0b47 \u0b0f\u0b2c\u0b02 \u0b0f\u0b39\u0b3f \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3f\u0b15 \u0b2a\u0b41\u0b28\u0b30\u0b3e\u0b2c\u0b32\u0b4b\u0b15\u0b28\u0b30 \u0b15\u0b4d\u0b37\u0b2e\u0b24\u0b3e \u0b30\u0b39\u0b3f\u0b1b\u0b3f \u0964 \" \"\u0b2d\u0b3e\u0b30\u0b24\u0b30 \u0b2e\u0b41\u0b16\u0b4d\u0b5f \u0b2c\u0b3f\u0b1a\u0b3e\u0b30\u0b2a\u0b24\u0b3f \u0b0f\u0b39\u0b3e\u0b30 \u0b2e\u0b41\u0b16\u0b4d\u0b5f \u0b05\u0b1f\u0b28\u0b4d\u0b24\u0b3f \u0964 \u0b24\u0b24\u0b4d\u0b38\u0b39\u0b3f\u0b24 \u0b0f\u0b25\u0b3f\u0b30\u0b47 \u0b38\u0b30\u0b4d\u0b2c\u0b3e\u0b27\u0b3f\u0b15 \u0b69\u0b6a \u0b1c\u0b23 \u0b2c\u0b3f\u0b1a\u0b3e\u0b30\u0b2a\u0b24\u0b3f \u0b05\u0b1b\u0b28\u0b4d\u0b24\u0b3f \u0964 \" \"\u0b2e\u0b41\u0b16\u0b4d\u0b5f, \u0b05\u0b2a\u0b3f\u0b32\u0b40\u0b5f \u0b24\u0b25\u0b3e \u0b2a\u0b30\u0b3e\u0b2e\u0b30\u0b4d\u0b36\u0b3f\u0b15 \u0b06\u0b26\u0b3f \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b15\u0b4d\u0b37\u0b47\u0b24\u0b4d\u0b30 \u0b2e\u0b3e\u0b27\u0b4d\u0b5f\u0b2e\u0b30\u0b47 \u0b0f\u0b39\u0b3e\u0b30 \u0b2c\u0b3f\u0b38\u0b4d\u0b24\u0b43\u0b24 \u0b15\u0b4d\u0b37\u0b2e\u0b24\u0b3e \u0b30\u0b39\u0b3f\u0b1b\u0b3f \u0964 \" \"\u0b0f\u0b39\u0b3e \u0b2d\u0b3e\u0b30\u0b24\u0b30\u0b47 \u0b38\u0b2c\u0b41\u0b20\u0b3e\u0b30\u0b41 \u0b36\u0b15\u0b4d\u0b24\u0b3f\u0b36\u0b3e\u0b33\u0b40 \u0b32\u0b4b\u0b15\u0b3e\u0b28\u0b41\u0b37\u0b4d\u0b20\u0b3e\u0b28 \u0b2c\u0b4b\u0b32\u0b3f \u0b27\u0b30\u0b3e\u0b2f\u0b3e\u0b07\u0b05\u0b1b\u0b3f \u0964 \" \"\u0b26\u0b47\u0b36\u0b30 \u0b38\u0b3e\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28\u0b3f\u0b15 \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b39\u0b4b\u0b07\u0b25\u0b3f\u0b2c\u0b3e\u0b30\u0b41, \u0b0f\u0b39\u0b3e \u0b2e\u0b41\u0b16\u0b4d\u0b5f\u0b24\u0b03 \u0b38\u0b19\u0b4d\u0b18\u0b30 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b09\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b24\u0b25\u0b3e \" \"\u0b05\u0b28\u0b4d\u0b5f\u0b3e\u0b28\u0b4d\u0b5f \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b13 \" \"\u0b1f\u0b4d\u0b30\u0b3f\u0b2c\u0b4d\u0b5f\u0b41\u0b28\u0b3e\u0b32\u0b2e\u0b3e\u0b28\u0b19\u0b4d\u0b15\u0b30 \u0b30\u0b3e\u0b5f \u0b2c\u0b3f\u0b30\u0b41\u0b26\u0b4d\u0b27\u0b30\u0b47 \u0b05\u0b2a\u0b3f\u0b32\u0b4d \u0b28\u0b3f\u0b0f \u0964 \" \"\u0b0f\u0b39\u0b3e \u0b28\u0b3e\u0b17\u0b30\u0b3f\u0b15\u0b2e\u0b3e\u0b28\u0b19\u0b4d\u0b15\u0b30 \u0b2e\u0b4c\u0b33\u0b3f\u0b15 \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b30 \u0b30\u0b15\u0b4d\u0b37\u0b3e\u0b15\u0b30\u0b47 \u0b0f\u0b2c\u0b02 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b38\u0b30\u0b15\u0b3e\u0b30\u0b40 \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b40 \u0b24\u0b25\u0b3e \" \"\u0b26\u0b47\u0b36\u0b30\u0b47 \u0b15\u0b47\u0b28\u0b4d\u0b26\u0b4d\u0b30 \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2c\u0b28\u0b3e\u0b2e \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b15\u0b3f\u0b2e\u0b4d\u0b2c\u0b3e \u0b17\u0b4b\u0b1f\u0b3f\u0b0f \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2c\u0b28\u0b3e\u0b2e \u0b05\u0b28\u0b4d\u0b5f \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \" \"\u0b2e\u0b27\u0b4d\u0b5f\u0b30\u0b47 \u0b2c\u0b3f\u0b2c\u0b3e\u0b26\u0b30 \u0b38\u0b2e\u0b3e\u0b27\u0b3e\u0b28 \u0b15\u0b30\u0b47 \u0964 \" \"\u0b0f\u0b15 \u0b2a\u0b30\u0b3e\u0b2e\u0b30\u0b4d\u0b36\u0b26\u0b3e\u0b24\u0b3e \u0b39\u0b3f\u0b38\u0b3e\u0b2c\u0b30\u0b47, \u0b0f\u0b39\u0b3e \u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28 \u0b05\u0b28\u0b41\u0b38\u0b3e\u0b30\u0b47 \u0b30\u0b3e\u0b37\u0b4d\u0b1f\u0b4d\u0b30\u0b2a\u0b24\u0b3f\u0b19\u0b4d\u0b15\u0b26\u0b4d\u0b71\u0b3e\u0b30\u0b3e \u0b38\u0b42\u0b1a\u0b40\u0b24 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b2c\u0b3f\u0b37\u0b5f\u0b2c\u0b38\u0b4d\u0b24\u0b41 \" \"\u0b09\u0b2a\u0b30\u0b47 \u0b36\u0b41\u0b23\u0b3e\u0b23\u0b3f \u0b15\u0b30\u0b3f\u0b25\u0b3e\u0b0f \u0964 \" ) >>> wf . get_summary () # Auto threshold calculation '\u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b30\u0b4d\u0b2c\u0b4b\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f, \u0b2d\u0b3e\u0b30\u0b24\u0b30 \u0b09\u0b1a\u0b4d\u0b1a\u0b24\u0b2e \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3f\u0b15 \u0b05\u0b28\u0b41\u0b37\u0b4d\u0b20\u0b3e\u0b28 \u0b05\u0b1f\u0b47 \u0b0f\u0b2c\u0b02 \u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28 \u0b05\u0b27\u0b40\u0b28\u0b38\u0b4d\u0b25 \u0b38\u0b30\u0b4d\u0b2c\u0b4b\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b05\u0b1f\u0b47 \u0b0f\u0b39\u0b3e \u0b38\u0b30\u0b4d\u0b2c \u0b2c\u0b30\u0b3f\u0b37\u0b4d\u0b20 \u0b38\u0b3e\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28\u0b3f\u0b15 \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b05\u0b1f\u0b47 \u0b0f\u0b2c\u0b02 \u0b0f\u0b39\u0b3f \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3f\u0b15 \u0b2a\u0b41\u0b28\u0b30\u0b3e\u0b2c\u0b32\u0b4b\u0b15\u0b28\u0b30 \u0b15\u0b4d\u0b37\u0b2e\u0b24\u0b3e \u0b30\u0b39\u0b3f\u0b1b\u0b3f \u0b2d\u0b3e\u0b30\u0b24\u0b30 \u0b2e\u0b41\u0b16\u0b4d\u0b5f \u0b2c\u0b3f\u0b1a\u0b3e\u0b30\u0b2a\u0b24\u0b3f \u0b0f\u0b39\u0b3e\u0b30 \u0b2e\u0b41\u0b16\u0b4d\u0b5f \u0b05\u0b1f\u0b28\u0b4d\u0b24\u0b3f \u0b24\u0b24\u0b4d\u0b38\u0b39\u0b3f\u0b24 \u0b0f\u0b25\u0b3f\u0b30\u0b47 \u0b38\u0b30\u0b4d\u0b2c\u0b3e\u0b27\u0b3f\u0b15 \u0b69\u0b6a \u0b1c\u0b23 \u0b2c\u0b3f\u0b1a\u0b3e\u0b30\u0b2a\u0b24\u0b3f \u0b05\u0b1b\u0b28\u0b4d\u0b24\u0b3f \u0b2e\u0b41\u0b16\u0b4d\u0b5f, \u0b05\u0b2a\u0b3f\u0b32\u0b40\u0b5f \u0b24\u0b25\u0b3e \u0b2a\u0b30\u0b3e\u0b2e\u0b30\u0b4d\u0b36\u0b3f\u0b15 \u0b06\u0b26\u0b3f \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b15\u0b4d\u0b37\u0b47\u0b24\u0b4d\u0b30 \u0b2e\u0b3e\u0b27\u0b4d\u0b5f\u0b2e\u0b30\u0b47 \u0b0f\u0b39\u0b3e\u0b30 \u0b2c\u0b3f\u0b38\u0b4d\u0b24\u0b43\u0b24 \u0b15\u0b4d\u0b37\u0b2e\u0b24\u0b3e \u0b30\u0b39\u0b3f\u0b1b\u0b3f \u0b0f\u0b39\u0b3e \u0b2d\u0b3e\u0b30\u0b24\u0b30\u0b47 \u0b38\u0b2c\u0b41\u0b20\u0b3e\u0b30\u0b41 \u0b36\u0b15\u0b4d\u0b24\u0b3f\u0b36\u0b3e\u0b33\u0b40 \u0b32\u0b4b\u0b15\u0b3e\u0b28\u0b41\u0b37\u0b4d\u0b20\u0b3e\u0b28 \u0b2c\u0b4b\u0b32\u0b3f \u0b27\u0b30\u0b3e\u0b2f\u0b3e\u0b07\u0b05\u0b1b\u0b3f \u0b26\u0b47\u0b36\u0b30 \u0b38\u0b3e\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28\u0b3f\u0b15 \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b39\u0b4b\u0b07\u0b25\u0b3f\u0b2c\u0b3e\u0b30\u0b41, \u0b0f\u0b39\u0b3e \u0b2e\u0b41\u0b16\u0b4d\u0b5f\u0b24\u0b03 \u0b38\u0b19\u0b4d\u0b18\u0b30 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b09\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b24\u0b25\u0b3e \u0b05\u0b28\u0b4d\u0b5f\u0b3e\u0b28\u0b4d\u0b5f \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b13 \u0b1f\u0b4d\u0b30\u0b3f\u0b2c\u0b4d\u0b5f\u0b41\u0b28\u0b3e\u0b32\u0b2e\u0b3e\u0b28\u0b19\u0b4d\u0b15\u0b30 \u0b30\u0b3e\u0b5f \u0b2c\u0b3f\u0b30\u0b41\u0b26\u0b4d\u0b27\u0b30\u0b47 \u0b05\u0b2a\u0b3f\u0b32\u0b4d \u0b28\u0b3f\u0b0f \u0b0f\u0b39\u0b3e \u0b28\u0b3e\u0b17\u0b30\u0b3f\u0b15\u0b2e\u0b3e\u0b28\u0b19\u0b4d\u0b15\u0b30 \u0b2e\u0b4c\u0b33\u0b3f\u0b15 \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b30 \u0b30\u0b15\u0b4d\u0b37\u0b3e\u0b15\u0b30\u0b47 \u0b0f\u0b2c\u0b02 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b38\u0b30\u0b15\u0b3e\u0b30\u0b40 \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b40 \u0b24\u0b25\u0b3e \u0b26\u0b47\u0b36\u0b30\u0b47 \u0b15\u0b47\u0b28\u0b4d\u0b26\u0b4d\u0b30 \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2c\u0b28\u0b3e\u0b2e \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b15\u0b3f\u0b2e\u0b4d\u0b2c\u0b3e \u0b17\u0b4b\u0b1f\u0b3f\u0b0f \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2c\u0b28\u0b3e\u0b2e \u0b05\u0b28\u0b4d\u0b5f \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2e\u0b27\u0b4d\u0b5f\u0b30\u0b47 \u0b2c\u0b3f\u0b2c\u0b3e\u0b26\u0b30 \u0b38\u0b2e\u0b3e\u0b27\u0b3e\u0b28 \u0b15\u0b30\u0b47 \u0b0f\u0b15 \u0b2a\u0b30\u0b3e\u0b2e\u0b30\u0b4d\u0b36\u0b26\u0b3e\u0b24\u0b3e \u0b39\u0b3f\u0b38\u0b3e\u0b2c\u0b30\u0b47, \u0b0f\u0b39\u0b3e \u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28 \u0b05\u0b28\u0b41\u0b38\u0b3e\u0b30\u0b47 \u0b30\u0b3e\u0b37\u0b4d\u0b1f\u0b4d\u0b30\u0b2a\u0b24\u0b3f\u0b19\u0b4d\u0b15\u0b26\u0b4d\u0b71\u0b3e\u0b30\u0b3e \u0b38\u0b42\u0b1a\u0b40\u0b24 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b2c\u0b3f\u0b37\u0b5f\u0b2c\u0b38\u0b4d\u0b24\u0b41 \u0b09\u0b2a\u0b30\u0b47 \u0b36\u0b41\u0b23\u0b3e\u0b23\u0b3f \u0b15\u0b30\u0b3f\u0b25\u0b3e\u0b0f' >>> wf . get_summary ( threshold = 3.0 ) # higher the threshold lesser the summary text '\u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b30\u0b4d\u0b2c\u0b4b\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f, \u0b2d\u0b3e\u0b30\u0b24\u0b30 \u0b09\u0b1a\u0b4d\u0b1a\u0b24\u0b2e \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3f\u0b15 \u0b05\u0b28\u0b41\u0b37\u0b4d\u0b20\u0b3e\u0b28 \u0b05\u0b1f\u0b47 \u0b0f\u0b2c\u0b02 \u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28 \u0b05\u0b27\u0b40\u0b28\u0b38\u0b4d\u0b25 \u0b38\u0b30\u0b4d\u0b2c\u0b4b\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b05\u0b1f\u0b47 \u0b0f\u0b39\u0b3e \u0b38\u0b30\u0b4d\u0b2c \u0b2c\u0b30\u0b3f\u0b37\u0b4d\u0b20 \u0b38\u0b3e\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28\u0b3f\u0b15 \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b05\u0b1f\u0b47 \u0b0f\u0b2c\u0b02 \u0b0f\u0b39\u0b3f \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3f\u0b15 \u0b2a\u0b41\u0b28\u0b30\u0b3e\u0b2c\u0b32\u0b4b\u0b15\u0b28\u0b30 \u0b15\u0b4d\u0b37\u0b2e\u0b24\u0b3e \u0b30\u0b39\u0b3f\u0b1b\u0b3f \u0b26\u0b47\u0b36\u0b30 \u0b38\u0b3e\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28\u0b3f\u0b15 \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b39\u0b4b\u0b07\u0b25\u0b3f\u0b2c\u0b3e\u0b30\u0b41, \u0b0f\u0b39\u0b3e \u0b2e\u0b41\u0b16\u0b4d\u0b5f\u0b24\u0b03 \u0b38\u0b19\u0b4d\u0b18\u0b30 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b09\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b24\u0b25\u0b3e \u0b05\u0b28\u0b4d\u0b5f\u0b3e\u0b28\u0b4d\u0b5f \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b13 \u0b1f\u0b4d\u0b30\u0b3f\u0b2c\u0b4d\u0b5f\u0b41\u0b28\u0b3e\u0b32\u0b2e\u0b3e\u0b28\u0b19\u0b4d\u0b15\u0b30 \u0b30\u0b3e\u0b5f \u0b2c\u0b3f\u0b30\u0b41\u0b26\u0b4d\u0b27\u0b30\u0b47 \u0b05\u0b2a\u0b3f\u0b32\u0b4d \u0b28\u0b3f\u0b0f \u0b0f\u0b39\u0b3e \u0b28\u0b3e\u0b17\u0b30\u0b3f\u0b15\u0b2e\u0b3e\u0b28\u0b19\u0b4d\u0b15\u0b30 \u0b2e\u0b4c\u0b33\u0b3f\u0b15 \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b30 \u0b30\u0b15\u0b4d\u0b37\u0b3e\u0b15\u0b30\u0b47 \u0b0f\u0b2c\u0b02 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b38\u0b30\u0b15\u0b3e\u0b30\u0b40 \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b40 \u0b24\u0b25\u0b3e \u0b26\u0b47\u0b36\u0b30\u0b47 \u0b15\u0b47\u0b28\u0b4d\u0b26\u0b4d\u0b30 \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2c\u0b28\u0b3e\u0b2e \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b15\u0b3f\u0b2e\u0b4d\u0b2c\u0b3e \u0b17\u0b4b\u0b1f\u0b3f\u0b0f \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2c\u0b28\u0b3e\u0b2e \u0b05\u0b28\u0b4d\u0b5f \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2e\u0b27\u0b4d\u0b5f\u0b30\u0b47 \u0b2c\u0b3f\u0b2c\u0b3e\u0b26\u0b30 \u0b38\u0b2e\u0b3e\u0b27\u0b3e\u0b28 \u0b15\u0b30\u0b47' Offline Dictionary \u00b6 An offline dictionary will be downloaded as soon as you install this library. Therefore, when you translate from English to Odia words/phrases it will hit the offline dictionary first, if not found it will go for the Google translate API. Google Translate API responses have been cached, therefore from the 2 nd call onwards on the same term(s) it will fetch fast from the local in-memory cache. We have used LRU (Least Recently Used) cache with a maximum size of 10000. English to Odia translation Workflow Therefore, we have two flows on English to Odia dictionary translation: English text \u2192 Check in Offline dictionary \u2192 Found \u2192 Return result English text \u2192 Check in Offline dictionary \u2192 Not Found \u2192 Check in Cache \u2192 Found \u2192 Return result from Cache English text \u2192 Check in Offline dictionary \u2192 Not Found \u2192 Check in Cache \u2192 Not Found \u2192 Hit Google Translate API \u2192 Update the Cache \u2192 Return result Known Issues \u00b6 There are few issues in the code an be found here . Contributions are highly welcomed. Quote \"In my dream of the 21 st century for the State, I would have young men and women who put the interest of the State before them. They will have pride in themselves, confidence in themselves. They will not be at anybody\u2019s mercy, except their own selves. By their brains, intelligence and capacity, they will recapture the history of Kalinga.\" - Biju Pattnaik To cite this page, please use: @misc { OpenOdia , author = {Soumendra Kumar Sahoo} , title = {OpenOdia Documentation} , howpublished = {\\url{https://www.openodia.soumendrak.com/}} , year = {2021} }","title":"Get started"},{"location":"#get-started","text":"","title":"Get started"},{"location":"#installation","text":"Setup the library from Pypi using the following command in your terminal or command prompt. pip install openodia","title":"Installation"},{"location":"#features","text":"The tools are available in Odia language. Odia Alphabets Generate random Odia names Detect Odia Language Word Tokenizer Remove stopwords Google Translate Automatic extractive text summarization Add Dictionary corpus Add English-Odia Parallel corpus Add Odia Monolingual corpus Add NER dataset of places, actors, etc. Robust paragraph to sentence tokenizer covering edge cases Stemming tool Customized stopword support Add OdiaBert Improve the CI/CD pipeline","title":"Features"},{"location":"#odia-alphabets","text":"To get the Odia alphabets use the alphabet module >>> from openodia import alphabet >>> alphabet . all_letters [ '\u0b01' , '\u0b02' , '\u0b03' , '\u0b05' , '\u0b06' , '\u0b07' , '\u0b08' , '\u0b09' , '\u0b0a' , '\u0b0b' , '\u0b0c' , '\u0b0f' , '\u0b10' , '\u0b13' , '\u0b14' , '\u0b15' , '\u0b16' , '\u0b17' , '\u0b18' , '\u0b19' , '\u0b1a' , '\u0b1b' , '\u0b1c' , '\u0b1d' , '\u0b1e' , '\u0b1f' , '\u0b20' , '\u0b21' , '\u0b22' , '\u0b23' , '\u0b24' , '\u0b25' , '\u0b26' , '\u0b27' , '\u0b28' , '\u0b2a' , '\u0b2b' , '\u0b2c' , '\u0b2d' , '\u0b2e' , '\u0b2f' , '\u0b30' , '\u0b32' , '\u0b33' , '\u0b35' , '\u0b36' , '\u0b37' , '\u0b38' , '\u0b39' , '\u0b3c' , '\u0b3d' , '\u0b3e' , '\u0b3f' , '\u0b40' , '\u0b41' , '\u0b42' , '\u0b43' , '\u0b44' , '\u0b47' , '\u0b48' , '\u0b4b' , '\u0b4c' , '\u0b4d' , '\u0b56' , '\u0b57' , '\u0b21\u0b3c' , '\u0b22\u0b3c' , '\u0b5f' , '\u0b60' , '\u0b61' , '\u0b62' , '\u0b63' , '\u0b66' , '\u0b67' , '\u0b68' , '\u0b69' , '\u0b6a' , '\u0b6b' , '\u0b6c' , '\u0b6d' , '\u0b6e' , '\u0b6f' , '\u0b70' , '\u0b71' , '\u0b72' ] >>> alphabet . consonants [ '\u0b15' , '\u0b16' , '\u0b17' , '\u0b18' , '\u0b19' , '\u0b1a' , '\u0b1b' , '\u0b1c' , '\u0b1d' , '\u0b1e' , '\u0b1f' , '\u0b20' , '\u0b21' , '\u0b22' , '\u0b23' , '\u0b24' , '\u0b25' , '\u0b26' , '\u0b27' , '\u0b28' , '\u0b2a' , '\u0b2b' , '\u0b2c' , '\u0b2d' , '\u0b2e' , '\u0b2f' , '\u0b30' , '\u0b32' , '\u0b33' , '\u0b35' , '\u0b36' , '\u0b37' , '\u0b38' , '\u0b39' ] >>> alphabet . vowels [ '\u0b05' , '\u0b06' , '\u0b07' , '\u0b08' , '\u0b09' , '\u0b0a' , '\u0b0b' , '\u0b0c' , '\u0b0f' , '\u0b10' , '\u0b13' , '\u0b14' ] >>> alphabet . numbers [ '\u0b66' , '\u0b67' , '\u0b68' , '\u0b69' , '\u0b6a' , '\u0b6b' , '\u0b6c' , '\u0b6d' , '\u0b6e' , '\u0b6f' ] >>> alphabet . matra [ '\u0b01' , '\u0b02' , '\u0b03' , '\u0b3c' , '\u0b3d' , '\u0b3e' , '\u0b3f' , '\u0b40' , '\u0b41' , '\u0b42' , '\u0b43' , '\u0b44' , '\u0b47' , '\u0b48' , '\u0b4b' , '\u0b4c' , '\u0b4d' , '\u0b56' , '\u0b57' , '\u0b70' , '\u0b71' , '\u0b72' ]","title":" Odia alphabets"},{"location":"#odia-names","text":"You can generate Odia names using the name module with the following syntax: >>> from openodia import name >>> name . generate_names () [ '\u0b2f\u0b26\u0b41\u0b2e\u0b23\u0b40 \u0b2e\u0b3e\u0b22\u0b3c\u0b40' , '\u0b2c\u0b3e\u0b38\u0b28\u0b4d\u0b24\u0b3f \u0b2c\u0b4d\u0b30\u0b39\u0b4d\u0b2e\u0b3e' , '\u0b2a\u0b4d\u0b30\u0b2c\u0b40\u0b23 \u0b38\u0b3f\u0b02\u0b39 \u0b2e\u0b41\u0b15\u0b4d\u0b15\u0b3f\u0b2e' , '\u0b2c\u0b43\u0b28\u0b4d\u0b26\u0b3e\u0b2c\u0b28 \u0b27\u0b33' , '\u0b05\u0b36\u0b4d\u0b71\u0b3f\u0b28\u0b40 \u0b15\u0b3f\u0b36\u0b4b\u0b30 \u0b1c\u0b17\u0b26\u0b47\u0b2c' , '\u0b36\u0b4d\u0b30\u0b40\u0b2f\u0b41\u0b15\u0b4d\u0b24 \u0b07\u0b30\u0b3e\u0b36\u0b3f\u0b37 \u0b38\u0b47\u0b20\u0b40' , '\u0b15\u0b41\u0b2e\u0b3e\u0b30\u0b40 \u0b38\u0b41\u0b2e\u0b28 \u0b38\u0b3f\u0b02\u0b26\u0b47\u0b13' , '\u0b38\u0b32\u0b3f\u0b32 \u0b05\u0b32\u0b4d\u0b32\u0b40 \u0b1b\u0b24\u0b4d\u0b30\u0b3f\u0b06' , '\u0b26\u0b3f\u0b2c\u0b3e\u0b15\u0b30\u0b28\u0b3e\u0b25 \u0b30\u0b3e\u0b27\u0b3e\u0b30\u0b3e\u0b23\u0b40 \u0b06\u0b1a\u0b3e\u0b30\u0b4d\u0b2f\u0b4d\u0b5f' , '\u0b26\u0b41\u0b30\u0b4d\u0b17\u0b3e \u0b38\u0b41\u0b28\u0b4d\u0b26\u0b30\u0b38\u0b41\u0b30\u0b4d\u0b2f\u0b4d\u0b5f\u0b3e \u0b2a\u0b41\u0b1f\u0b40' ] - By default it will return ten randomly generated names. - If you want, you can generate more names by providing the number of names needed in the first argument. >>> name . generate_names ( 20 ) [ '\u0b38\u0b3e\u0b2c\u0b3f\u0b24\u0b4d\u0b30\u0b40 \u0b27\u0b33' , '\u0b36\u0b4d\u0b30\u0b40\u0b2f\u0b41\u0b15\u0b4d\u0b24 \u0b09\u0b24\u0b4d\u0b15\u0b33 \u0b2a\u0b3e\u0b33' , '\u0b2f\u0b26\u0b41\u0b2e\u0b23\u0b3f \u0b38\u0b41\u0b2c\u0b3e\u0b39\u0b41' , '\u0b2a\u0b4d\u0b30\u0b47\u0b2e\u0b32\u0b24\u0b3e \u0b2a\u0b2e' , '\u0b17\u0b41\u0b30\u0b41 \u0b2a\u0b43\u0b37\u0b4d\u0b1f\u0b3f' , '\u0b17\u0b40\u0b24\u0b3e \u0b26\u0b3e\u0b38\u0b2c\u0b30\u0b4d\u0b2e\u0b3e' , '\u0b15\u0b41\u0b2e\u0b3e\u0b30\u0b40 \u0b26\u0b41\u0b30\u0b4d\u0b17\u0b3e \u0b2c\u0b4d\u0b30\u0b39\u0b4d\u0b2e\u0b3e' , '\u0b15\u0b41\u0b2e\u0b3e\u0b30\u0b40 \u0b2a\u0b41\u0b2a\u0b41\u0b32 \u0b39\u0b47\u0b2e\u0b4d\u0b2c\u0b4d\u0b30\u0b2e' , '\u0b2e\u0b15\u0b30 \u0b38\u0b3e\u0b07' , '\u0b32\u0b15\u0b4d\u0b37\u0b4d\u0b2e\u0b40\u0b15\u0b3e\u0b28\u0b4d\u0b24 \u0b28\u0b28\u0b4d\u0b26\u0b3f' , '\u0b36\u0b4d\u0b30\u0b40 \u0b26\u0b40\u0b28\u0b2c\u0b28\u0b4d\u0b27\u0b41 \u0b32\u0b4b\u0b15' , '\u0b15\u0b41\u0b2e\u0b3e\u0b30\u0b40 \u0b1c\u0b3f\u0b28\u0b3e \u0b17\u0b1c\u0b2a\u0b24\u0b3f' , '\u0b2e\u0b43\u0b23\u0b3e\u0b33 \u0b2d\u0b42\u0b37\u0b23 \u0b1b\u0b24\u0b4d\u0b30\u0b3f\u0b06' , '\u0b38\u0b41\u0b27\u0b3e\u0b02\u0b36\u0b41\u0b2e\u0b3e\u0b33\u0b3f\u0b28\u0b40 \u0b38\u0b3f\u0b02\u0b39 \u0b38\u0b3e\u0b32\u0b41\u0b1c\u0b3e' , '\u0b38\u0b41\u0b27\u0b3e\u0b02\u0b36\u0b41\u0b2e\u0b3e\u0b33\u0b3f\u0b28\u0b40 \u0b2e\u0b39\u0b3e\u0b28\u0b28\u0b4d\u0b26' , '\u0b38\u0b41\u0b2e\u0b28\u0b40 \u0b28\u0b3e\u0b25' , '\u0b15\u0b41\u0b2e\u0b3e\u0b30\u0b40 \u0b28\u0b40\u0b24\u0b41 \u0b39\u0b3f\u0b15\u0b4d\u0b15\u0b3e' , '\u0b36\u0b4d\u0b30\u0b40\u0b2e\u0b24\u0b40 \u0b32\u0b40\u0b33\u0b3e \u0b15\u0b3e\u0b21\u0b3e\u0b2e\u0b4d' , '\u0b38\u0b28\u0b3e\u0b24\u0b28 \u0b15\u0b41\u0b05\u0b01\u0b30' , '\u0b15\u0b41\u0b2e\u0b3e\u0b30\u0b40 \u0b15\u0b2c\u0b3f \u0b26\u0b3e\u0b38\u0b28\u0b3e\u0b5f\u0b15' ] - In addition to this, you can create specific name parts like prefix, first name, middle name, surname, etc. - By default you will get ten names. However, to get more number of results you can specify the number of names in the first argument. >>> from openodia import name >>> name . generate_firstnames () [ '\u0b05\u0b28\u0b3f\u0b30\u0b41\u0b26\u0b4d\u0b27' , '\u0b26\u0b47\u0b2c\u0b30\u0b3e\u0b1c' , '\u0b06\u0b36\u0b4d\u0b30\u0b3f\u0b24' , '\u0b2c\u0b26\u0b4d\u0b30\u0b3f' , '\u0b38\u0b26\u0b3e\u0b36\u0b3f\u0b2c' , '\u0b2a\u0b4d\u0b30\u0b26\u0b3f\u0b2a\u0b4d\u0b24' , '\u0b27\u0b43\u0b2c' , '\u0b36\u0b4d\u0b30\u0b40\u0b28\u0b3e\u0b25' , '\u0b38\u0b4d\u0b28\u0b3f\u0b24\u0b3f' , '\u0b2a\u0b4d\u0b30\u0b15\u0b43\u0b24\u0b3f' ] >>> name . generate_prefixes () [ '\u0b36\u0b4d\u0b30\u0b40\u0b2f\u0b41\u0b15\u0b4d\u0b24' , '\u0b36\u0b4d\u0b30\u0b40\u0b2e\u0b24\u0b40' , '\u0b15\u0b41\u0b2e\u0b3e\u0b30\u0b40' , '\u0b36\u0b4d\u0b30\u0b40\u0b2e\u0b3e\u0b28' , '\u0b38\u0b41\u0b36\u0b4d\u0b30\u0b40' , '\u0b36\u0b4d\u0b30\u0b40' ] >>> name . generate_middlenames () [ '\u0b32\u0b47\u0b16\u0b3e' , '\u0b36\u0b4d\u0b30\u0b40' , '\u0b2e\u0b3e\u0b27\u0b2c' , '\u0b15\u0b47\u0b24\u0b28' , '\u0b2f\u0b4b\u0b36\u0b47\u0b2b\u0b4d' , '\u0b15\u0b47\u0b36\u0b30\u0b40' , '\u0b2d\u0b42\u0b37\u0b23' , '\u0b30\u0b3e\u0b27\u0b3e\u0b30\u0b3e\u0b23\u0b40' , '\u0b2e\u0b3e\u0b28\u0b38\u0b3f\u0b02\u0b39' , '\u0b15\u0b3f\u0b36\u0b4b\u0b30' ] >>> name . generate_surnames () [ '\u0b2a\u0b30\u0b3f\u0b1c\u0b3e' , '\u0b30\u0b23\u0b38\u0b3f\u0b02\u0b39' , '\u0b2e\u0b39\u0b3e\u0b2a\u0b3e\u0b24\u0b4d\u0b30' , '\u0b30\u0b25' , '\u0b2e\u0b39\u0b28\u0b4d\u0b24' , '\u0b2c\u0b47\u0b39\u0b47\u0b30\u0b3e' , '\u0b26\u0b47\u0b13' , '\u0b27\u0b33' , '\u0b26\u0b3f\u0b06\u0b28' , '\u0b39\u0b3f\u0b2e\u0b3f\u0b30\u0b3f\u0b15\u0b3e' ]","title":"Odia names"},{"location":"#detect-odia-language","text":"A binary language classification method used which will return if the input text is in Odia language or in any other non-Odia language. Along with this a confidence score also returned. The score provides how confident the library is that it is Odia or Non-Odia. There is a threshold parameter to the method which can be configured to tune the confidence score threshold after which it will be regarded as Odia. The default value is 0.5. >>> from openodia import ud >>> ud . detect_language ( \"hey how are you?\" ) { 'language' : 'non-odia' , 'confidence_score' : 1.0 } >>> ud . detect_language ( \"hey how are you? \u0b28\u0b4d\u0b5f\u0b3e\u0b1a\u0b41\u0b30\u0b3e\u0b32 \u0b32\u0b3e\u0b19\u0b4d\u0b17\u0b41\u0b0f\u0b1c \u0b2a\u0b4d\u0b30\u0b4b\u0b38\u0b47\u0b38\u0b3f\u0b02\" ) { 'language' : 'odia' , 'confidence_score' : 0.66666 } >>> ud . detect_language ( \"hey how are you? \u0b28\u0b4d\u0b5f\u0b3e\u0b1a\u0b41\u0b30\u0b3e\u0b32 \u0b32\u0b3e\u0b19\u0b4d\u0b17\u0b41\u0b0f\u0b1c \u0b2a\u0b4d\u0b30\u0b4b\u0b38\u0b47\u0b38\u0b3f\u0b02\" , threshold = 0.7 ) { 'language' : 'non-odia' , 'confidence_score' : 0.333333 } >>> ud . detect_language ( \"\u0b28\u0b4d\u0b5f\u0b3e\u0b1a\u0b41\u0b30\u0b3e\u0b32 \u0b32\u0b3e\u0b19\u0b4d\u0b17\u0b41\u0b0f\u0b1c \u0b2a\u0b4d\u0b30\u0b4b\u0b38\u0b47\u0b38\u0b3f\u0b02 \u0b2c\u0b3e \u0b2a\u0b4d\u0b30\u0b3e\u0b15\u0b43\u0b24\u0b3f\u0b15 \u0b2d\u0b3e\u0b37\u0b3e \u0b2a\u0b4d\u0b30\u0b15\u0b4d\u0b30\u0b3f\u0b5f\u0b3e\u0b15\u0b30\u0b23 \u0b15\u0b02\u0b2a\u0b4d\u0b5f\u0b41\u0b1f\u0b30 \u0b2c\u0b3f\u0b1c\u0b4d\u0b1e\u0b3e\u0b28 \u0b0f\u0b2c\u0b02 \u0b06\u0b30\u0b4d\u0b1f\u0b3f\u0b2b\u0b3f\u0b38\u0b3f\u0b06\u0b32 \u0b07\u0b23\u0b4d\u0b1f\u0b47\u0b32\u0b3f\u0b1c\u0b47\u0b28\u0b4d\u0b38\u0b30 \u0b38\u0b47\u0b39\u0b3f \u0b2c\u0b3f\u0b2d\u0b3e\u0b17\u0b15\u0b41 \u0b15\u0b41\u0b39\u0b3e\u0b2f \u0b3e\u0b0f \u0b2f\u0b3e\u0b39\u0b3e \u0b2e\u0b28\u0b41\u0b37\u0b4d\u0b5f\u0b30 \u0b2d\u0b3e\u0b37\u0b3e\u0b17\u0b41\u0b21\u0b3c\u0b3f\u0b15 \u0b38\u0b39 \u0b15\u0b2e\u0b4d\u0b2a\u0b4d\u0b5f\u0b41\u0b1f\u0b30\u0b30 \u0b15\u0b25\u0b3e\u0b2c\u0b3e\u0b30\u0b4d\u0b24\u0b4d\u0b24\u0b3e\u0b15\u0b41 \u0b2c\u0b41\u0b1d\u0b3e\u0b07\u0b25\u0b3e\u0b0f\u0964 \" ) { 'language' : 'odia' , 'confidence_score' : 0.99404 }","title":" Detect Odia Language"},{"location":"#word-tokenizer","text":"To tokenize odia text into multiple words or tokens word_tokenizer module can be used. >>> from openodia import ud >>> ud . word_tokenizer ( \"\u0b15\u0b4d\u0b71\u0b3e\u0b23\u0b4d\u0b1f\u0b2e \u0b15\u0b2e\u0b4d\u0b2a\u0b4d\u0b5f\u0b41\u0b1f\u0b3f\u0b19\u0b4d\u0b17, \u0b39\u0b47\u0b09\u0b1b\u0b3f \u0b0f\u0b15 \u0b09\u0b26\u0b40\u0b5f\u0b2e\u0b3e\u0b28 \u0b39\u0b3e\u0b30\u0b4d\u0b21\u0b3c\u0b71\u0b47\u0b30 \u0b0f\u0b2c\u0b02 \u0b38\u0b2b\u0b4d\u0b1f\u0b71\u0b47\u0b30\u0b30 \u0b2a\u0b4d\u0b30\u0b2f\u0b41\u0b15\u0b4d\u0b24\u0b3f\u0b2c\u0b3f\u0b26\u0b4d\u0b5f\u0b3e, \u0b2f\u0b3e\u0b39\u0b3e \u0b15\u0b20\u0b3f\u0b28 \u0b17\u0b3e\u0b23\u0b3f\u0b24\u0b3f\u0b15 \u0b38\u0b2e\u0b38\u0b4d\u0b5f\u0b3e\u0b17\u0b41\u0b21\u0b3c\u0b3f\u0b15\u0b30 \u0b38\u0b2e\u0b3e\u0b27\u0b3e\u0b28 \u0b2a\u0b3e\u0b07\u0b01 \u0b09\u0b2a-\u0b2a\u0b3e\u0b30\u0b2e\u0b3e\u0b23\u0b2c\u0b3f\u0b15 \u0b18\u0b1f\u0b23\u0b3e\u0b17\u0b41\u0b21\u0b3c\u0b3f\u0b15\u0b30 \u0b09\u0b2a\u0b2f\u0b4b\u0b17 \u0b15\u0b30\u0b3f\u0b25\u0b3e\u0b0f \u0964[\u0b67]\" ) [ '\u0b15\u0b4d\u0b71\u0b3e\u0b23\u0b4d\u0b1f\u0b2e' , '\u0b15\u0b2e\u0b4d\u0b2a\u0b4d\u0b5f\u0b41\u0b1f\u0b3f\u0b19\u0b4d\u0b17' , '\u0b39\u0b47\u0b09\u0b1b\u0b3f' , '\u0b0f\u0b15' , '\u0b09\u0b26\u0b40\u0b5f\u0b2e\u0b3e\u0b28' , '\u0b39\u0b3e\u0b30\u0b4d\u0b21\u0b3c\u0b71\u0b47\u0b30' , '\u0b0f\u0b2c\u0b02' , '\u0b38\u0b2b\u0b4d\u0b1f\u0b71\u0b47\u0b30\u0b30' , '\u0b2a\u0b4d\u0b30\u0b2f\u0b41\u0b15\u0b4d\u0b24\u0b3f\u0b2c\u0b3f\u0b26\u0b4d\u0b5f\u0b3e' , '\u0b2f\u0b3e\u0b39\u0b3e' , '\u0b15\u0b20\u0b3f\u0b28' , '\u0b17\u0b3e\u0b23\u0b3f\u0b24\u0b3f\u0b15' , '\u0b38\u0b2e\u0b38\u0b4d\u0b5f\u0b3e\u0b17\u0b41\u0b21\u0b3c\u0b3f\u0b15\u0b30' , '\u0b38\u0b2e\u0b3e\u0b27\u0b3e\u0b28' , '\u0b2a\u0b3e\u0b07\u0b01' , '\u0b09\u0b2a' , '\u0b2a\u0b3e\u0b30\u0b2e\u0b3e\u0b23\u0b2c\u0b3f\u0b15' , '\u0b18\u0b1f\u0b23\u0b3e\u0b17\u0b41\u0b21\u0b3c\u0b3f\u0b15\u0b30' , '\u0b09\u0b2a\u0b2f\u0b4b\u0b17' , '\u0b15\u0b30\u0b3f\u0b25\u0b3e\u0b0f' , '\u0964' , '\u0b67' ]","title":" Word Tokenizer"},{"location":"#sentence-tokenizer","text":"Tokenize a paragraph into multiple sentences. Only working on full stop. >>> from openodia import ud >>> ud . sentence_tokenizer ()","title":" Sentence Tokenizer"},{"location":"#remove-stopwords","text":"Frequently occurring words in a language are called as stopwords . Using the below function you can remove the stopwords. Internally this method calls the word_tokenize method to get tokens from the text. As most of the time processing happens in list by default a list of strings will be returned. >>> from openodia import ud >>> ud . remove_stopwords ( \"\u0b30\u0b3e\u0b2e \u0b13 \u0b38\u0b40\u0b24\u0b3e \u0b06\u0b2e\u0b15\u0b41 \u0b06\u0b36\u0b40\u0b30\u0b4d\u0b2c\u0b3e\u0b26 \u0b26\u0b47\u0b07\u0b1b\u0b28\u0b4d\u0b24\u0b3f\" ) [ '\u0b30\u0b3e\u0b2e' , '\u0b38\u0b40\u0b24\u0b3e' , '\u0b06\u0b2e\u0b15\u0b41' , '\u0b06\u0b36\u0b40\u0b30\u0b4d\u0b2c\u0b3e\u0b26' ] >>> ud . remove_stopwords ( \"\u0b30\u0b3e\u0b2e \u0b13 \u0b38\u0b40\u0b24\u0b3e \u0b06\u0b2e\u0b15\u0b41 \u0b06\u0b36\u0b40\u0b30\u0b4d\u0b2c\u0b3e\u0b26 \u0b26\u0b47\u0b07\u0b1b\u0b28\u0b4d\u0b24\u0b3f \" , get_str = True ) '\u0b30\u0b3e\u0b2e \u0b38\u0b40\u0b24\u0b3e \u0b06\u0b2e\u0b15\u0b41 \u0b06\u0b36\u0b40\u0b30\u0b4d\u0b2c\u0b3e\u0b26' Here the stopwords \u0b13 and \u0b26\u0b47\u0b07\u0b1b\u0b28\u0b4d\u0b24\u0b3f are removed from the text.","title":" Remove stopwords"},{"location":"#translation","text":"The translation module is a wrapper on top of Google Translate API. There are two translation methods provided: odia_to_other_lang and other_lang_to_odia","title":" Translation"},{"location":"#other_lang_to_odia","text":"As the name suggests this function can be used to translate from any other language to Odia language. If you are translating from any other language other than English, please provide the language code of it. >>> from openodia import other_lang_to_odia , odia_to_other_lang >>> other_lang_to_odia ( \"hello! feeling good?\" ) '\u0b28\u0b2e\u0b38\u0b4d\u0b15\u0b3e\u0b30!\u0b2d\u0b32 \u0b32\u0b3e\u0b17\u0b41\u0b1b\u0b3f?' >>> other_lang_to_odia ( \"\u0936\u0947\u092f\u0930 \u092c\u093e\u091c\u093c\u093e\u0930 \u090f\u0915 \u0910\u0938\u093e \u092c\u093e\u091c\u093c\u093e\u0930 \u0939\u0948 \u091c\u0939\u093e\u0901 \u0915\u0902\u092a\u0928\u093f\u092f\u094b\u0902 \u0915\u0947 \u0936\u0947\u092f\u0930 \u0916\u0930\u0940\u0926\u0947-\u092c\u0947\u091a\u0947 \u091c\u093e \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\" , source_language = \"hi\" ) '\u0b37\u0b4d\u0b1f\u0b15\u0b4d \u0b2e\u0b3e\u0b30\u0b4d\u0b15\u0b47\u0b1f\u0b4d \u0b39\u0b47\u0b09\u0b1b\u0b3f \u0b0f\u0b15 \u0b2c\u0b1c\u0b3e\u0b30 \u0b2f\u0b47\u0b09\u0b01\u0b20\u0b3e\u0b30\u0b47 \u0b15\u0b2e\u0b4d\u0b2a\u0b3e\u0b28\u0b40\u0b17\u0b41\u0b21\u0b3f\u0b15 \u0b15\u0b3f\u0b23\u0b3e\u0b2f\u0b3e\u0b07\u0b2a\u0b3e\u0b30\u0b3f\u0b2c |'","title":"other_lang_to_odia"},{"location":"#odia_to_other_lang","text":"This function can be used to translate an Odia text into another language. The same language code you can choose from as provided above. By default the function will trasnlate to English language. >>> odia_to_other_lang ( \"\u0b28\u0b2e\u0b38\u0b4d\u0b15\u0b3e\u0b30!\u0b2d\u0b32 \u0b32\u0b3e\u0b17\u0b41\u0b1b\u0b3f?\" ) 'Hello! Sounds good?'","title":"odia_to_other_lang"},{"location":"#automatic-extractive-text-summarization","text":"Extracts the important summary snippet of a given text. >>> from openodia import WordFrequency >>> wf = WordFrequency ( text = \"\u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b30\u0b4d\u0b2c\u0b4b\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f, \u0b2d\u0b3e\u0b30\u0b24\u0b30 \u0b09\u0b1a\u0b4d\u0b1a\u0b24\u0b2e \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3f\u0b15 \u0b05\u0b28\u0b41\u0b37\u0b4d\u0b20\u0b3e\u0b28 \u0b05\u0b1f\u0b47 \u0b0f\u0b2c\u0b02 \u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28 \u0b05\u0b27\u0b40\u0b28\u0b38\u0b4d\u0b25 \" \"\u0b38\u0b30\u0b4d\u0b2c\u0b4b\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b05\u0b1f\u0b47 \u0964 \" \"\u0b0f\u0b39\u0b3e \u0b38\u0b30\u0b4d\u0b2c \u0b2c\u0b30\u0b3f\u0b37\u0b4d\u0b20 \u0b38\u0b3e\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28\u0b3f\u0b15 \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b05\u0b1f\u0b47 \u0b0f\u0b2c\u0b02 \u0b0f\u0b39\u0b3f \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3f\u0b15 \u0b2a\u0b41\u0b28\u0b30\u0b3e\u0b2c\u0b32\u0b4b\u0b15\u0b28\u0b30 \u0b15\u0b4d\u0b37\u0b2e\u0b24\u0b3e \u0b30\u0b39\u0b3f\u0b1b\u0b3f \u0964 \" \"\u0b2d\u0b3e\u0b30\u0b24\u0b30 \u0b2e\u0b41\u0b16\u0b4d\u0b5f \u0b2c\u0b3f\u0b1a\u0b3e\u0b30\u0b2a\u0b24\u0b3f \u0b0f\u0b39\u0b3e\u0b30 \u0b2e\u0b41\u0b16\u0b4d\u0b5f \u0b05\u0b1f\u0b28\u0b4d\u0b24\u0b3f \u0964 \u0b24\u0b24\u0b4d\u0b38\u0b39\u0b3f\u0b24 \u0b0f\u0b25\u0b3f\u0b30\u0b47 \u0b38\u0b30\u0b4d\u0b2c\u0b3e\u0b27\u0b3f\u0b15 \u0b69\u0b6a \u0b1c\u0b23 \u0b2c\u0b3f\u0b1a\u0b3e\u0b30\u0b2a\u0b24\u0b3f \u0b05\u0b1b\u0b28\u0b4d\u0b24\u0b3f \u0964 \" \"\u0b2e\u0b41\u0b16\u0b4d\u0b5f, \u0b05\u0b2a\u0b3f\u0b32\u0b40\u0b5f \u0b24\u0b25\u0b3e \u0b2a\u0b30\u0b3e\u0b2e\u0b30\u0b4d\u0b36\u0b3f\u0b15 \u0b06\u0b26\u0b3f \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b15\u0b4d\u0b37\u0b47\u0b24\u0b4d\u0b30 \u0b2e\u0b3e\u0b27\u0b4d\u0b5f\u0b2e\u0b30\u0b47 \u0b0f\u0b39\u0b3e\u0b30 \u0b2c\u0b3f\u0b38\u0b4d\u0b24\u0b43\u0b24 \u0b15\u0b4d\u0b37\u0b2e\u0b24\u0b3e \u0b30\u0b39\u0b3f\u0b1b\u0b3f \u0964 \" \"\u0b0f\u0b39\u0b3e \u0b2d\u0b3e\u0b30\u0b24\u0b30\u0b47 \u0b38\u0b2c\u0b41\u0b20\u0b3e\u0b30\u0b41 \u0b36\u0b15\u0b4d\u0b24\u0b3f\u0b36\u0b3e\u0b33\u0b40 \u0b32\u0b4b\u0b15\u0b3e\u0b28\u0b41\u0b37\u0b4d\u0b20\u0b3e\u0b28 \u0b2c\u0b4b\u0b32\u0b3f \u0b27\u0b30\u0b3e\u0b2f\u0b3e\u0b07\u0b05\u0b1b\u0b3f \u0964 \" \"\u0b26\u0b47\u0b36\u0b30 \u0b38\u0b3e\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28\u0b3f\u0b15 \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b39\u0b4b\u0b07\u0b25\u0b3f\u0b2c\u0b3e\u0b30\u0b41, \u0b0f\u0b39\u0b3e \u0b2e\u0b41\u0b16\u0b4d\u0b5f\u0b24\u0b03 \u0b38\u0b19\u0b4d\u0b18\u0b30 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b09\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b24\u0b25\u0b3e \" \"\u0b05\u0b28\u0b4d\u0b5f\u0b3e\u0b28\u0b4d\u0b5f \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b13 \" \"\u0b1f\u0b4d\u0b30\u0b3f\u0b2c\u0b4d\u0b5f\u0b41\u0b28\u0b3e\u0b32\u0b2e\u0b3e\u0b28\u0b19\u0b4d\u0b15\u0b30 \u0b30\u0b3e\u0b5f \u0b2c\u0b3f\u0b30\u0b41\u0b26\u0b4d\u0b27\u0b30\u0b47 \u0b05\u0b2a\u0b3f\u0b32\u0b4d \u0b28\u0b3f\u0b0f \u0964 \" \"\u0b0f\u0b39\u0b3e \u0b28\u0b3e\u0b17\u0b30\u0b3f\u0b15\u0b2e\u0b3e\u0b28\u0b19\u0b4d\u0b15\u0b30 \u0b2e\u0b4c\u0b33\u0b3f\u0b15 \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b30 \u0b30\u0b15\u0b4d\u0b37\u0b3e\u0b15\u0b30\u0b47 \u0b0f\u0b2c\u0b02 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b38\u0b30\u0b15\u0b3e\u0b30\u0b40 \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b40 \u0b24\u0b25\u0b3e \" \"\u0b26\u0b47\u0b36\u0b30\u0b47 \u0b15\u0b47\u0b28\u0b4d\u0b26\u0b4d\u0b30 \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2c\u0b28\u0b3e\u0b2e \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b15\u0b3f\u0b2e\u0b4d\u0b2c\u0b3e \u0b17\u0b4b\u0b1f\u0b3f\u0b0f \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2c\u0b28\u0b3e\u0b2e \u0b05\u0b28\u0b4d\u0b5f \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \" \"\u0b2e\u0b27\u0b4d\u0b5f\u0b30\u0b47 \u0b2c\u0b3f\u0b2c\u0b3e\u0b26\u0b30 \u0b38\u0b2e\u0b3e\u0b27\u0b3e\u0b28 \u0b15\u0b30\u0b47 \u0964 \" \"\u0b0f\u0b15 \u0b2a\u0b30\u0b3e\u0b2e\u0b30\u0b4d\u0b36\u0b26\u0b3e\u0b24\u0b3e \u0b39\u0b3f\u0b38\u0b3e\u0b2c\u0b30\u0b47, \u0b0f\u0b39\u0b3e \u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28 \u0b05\u0b28\u0b41\u0b38\u0b3e\u0b30\u0b47 \u0b30\u0b3e\u0b37\u0b4d\u0b1f\u0b4d\u0b30\u0b2a\u0b24\u0b3f\u0b19\u0b4d\u0b15\u0b26\u0b4d\u0b71\u0b3e\u0b30\u0b3e \u0b38\u0b42\u0b1a\u0b40\u0b24 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b2c\u0b3f\u0b37\u0b5f\u0b2c\u0b38\u0b4d\u0b24\u0b41 \" \"\u0b09\u0b2a\u0b30\u0b47 \u0b36\u0b41\u0b23\u0b3e\u0b23\u0b3f \u0b15\u0b30\u0b3f\u0b25\u0b3e\u0b0f \u0964 \" ) >>> wf . get_summary () # Auto threshold calculation '\u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b30\u0b4d\u0b2c\u0b4b\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f, \u0b2d\u0b3e\u0b30\u0b24\u0b30 \u0b09\u0b1a\u0b4d\u0b1a\u0b24\u0b2e \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3f\u0b15 \u0b05\u0b28\u0b41\u0b37\u0b4d\u0b20\u0b3e\u0b28 \u0b05\u0b1f\u0b47 \u0b0f\u0b2c\u0b02 \u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28 \u0b05\u0b27\u0b40\u0b28\u0b38\u0b4d\u0b25 \u0b38\u0b30\u0b4d\u0b2c\u0b4b\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b05\u0b1f\u0b47 \u0b0f\u0b39\u0b3e \u0b38\u0b30\u0b4d\u0b2c \u0b2c\u0b30\u0b3f\u0b37\u0b4d\u0b20 \u0b38\u0b3e\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28\u0b3f\u0b15 \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b05\u0b1f\u0b47 \u0b0f\u0b2c\u0b02 \u0b0f\u0b39\u0b3f \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3f\u0b15 \u0b2a\u0b41\u0b28\u0b30\u0b3e\u0b2c\u0b32\u0b4b\u0b15\u0b28\u0b30 \u0b15\u0b4d\u0b37\u0b2e\u0b24\u0b3e \u0b30\u0b39\u0b3f\u0b1b\u0b3f \u0b2d\u0b3e\u0b30\u0b24\u0b30 \u0b2e\u0b41\u0b16\u0b4d\u0b5f \u0b2c\u0b3f\u0b1a\u0b3e\u0b30\u0b2a\u0b24\u0b3f \u0b0f\u0b39\u0b3e\u0b30 \u0b2e\u0b41\u0b16\u0b4d\u0b5f \u0b05\u0b1f\u0b28\u0b4d\u0b24\u0b3f \u0b24\u0b24\u0b4d\u0b38\u0b39\u0b3f\u0b24 \u0b0f\u0b25\u0b3f\u0b30\u0b47 \u0b38\u0b30\u0b4d\u0b2c\u0b3e\u0b27\u0b3f\u0b15 \u0b69\u0b6a \u0b1c\u0b23 \u0b2c\u0b3f\u0b1a\u0b3e\u0b30\u0b2a\u0b24\u0b3f \u0b05\u0b1b\u0b28\u0b4d\u0b24\u0b3f \u0b2e\u0b41\u0b16\u0b4d\u0b5f, \u0b05\u0b2a\u0b3f\u0b32\u0b40\u0b5f \u0b24\u0b25\u0b3e \u0b2a\u0b30\u0b3e\u0b2e\u0b30\u0b4d\u0b36\u0b3f\u0b15 \u0b06\u0b26\u0b3f \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b15\u0b4d\u0b37\u0b47\u0b24\u0b4d\u0b30 \u0b2e\u0b3e\u0b27\u0b4d\u0b5f\u0b2e\u0b30\u0b47 \u0b0f\u0b39\u0b3e\u0b30 \u0b2c\u0b3f\u0b38\u0b4d\u0b24\u0b43\u0b24 \u0b15\u0b4d\u0b37\u0b2e\u0b24\u0b3e \u0b30\u0b39\u0b3f\u0b1b\u0b3f \u0b0f\u0b39\u0b3e \u0b2d\u0b3e\u0b30\u0b24\u0b30\u0b47 \u0b38\u0b2c\u0b41\u0b20\u0b3e\u0b30\u0b41 \u0b36\u0b15\u0b4d\u0b24\u0b3f\u0b36\u0b3e\u0b33\u0b40 \u0b32\u0b4b\u0b15\u0b3e\u0b28\u0b41\u0b37\u0b4d\u0b20\u0b3e\u0b28 \u0b2c\u0b4b\u0b32\u0b3f \u0b27\u0b30\u0b3e\u0b2f\u0b3e\u0b07\u0b05\u0b1b\u0b3f \u0b26\u0b47\u0b36\u0b30 \u0b38\u0b3e\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28\u0b3f\u0b15 \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b39\u0b4b\u0b07\u0b25\u0b3f\u0b2c\u0b3e\u0b30\u0b41, \u0b0f\u0b39\u0b3e \u0b2e\u0b41\u0b16\u0b4d\u0b5f\u0b24\u0b03 \u0b38\u0b19\u0b4d\u0b18\u0b30 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b09\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b24\u0b25\u0b3e \u0b05\u0b28\u0b4d\u0b5f\u0b3e\u0b28\u0b4d\u0b5f \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b13 \u0b1f\u0b4d\u0b30\u0b3f\u0b2c\u0b4d\u0b5f\u0b41\u0b28\u0b3e\u0b32\u0b2e\u0b3e\u0b28\u0b19\u0b4d\u0b15\u0b30 \u0b30\u0b3e\u0b5f \u0b2c\u0b3f\u0b30\u0b41\u0b26\u0b4d\u0b27\u0b30\u0b47 \u0b05\u0b2a\u0b3f\u0b32\u0b4d \u0b28\u0b3f\u0b0f \u0b0f\u0b39\u0b3e \u0b28\u0b3e\u0b17\u0b30\u0b3f\u0b15\u0b2e\u0b3e\u0b28\u0b19\u0b4d\u0b15\u0b30 \u0b2e\u0b4c\u0b33\u0b3f\u0b15 \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b30 \u0b30\u0b15\u0b4d\u0b37\u0b3e\u0b15\u0b30\u0b47 \u0b0f\u0b2c\u0b02 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b38\u0b30\u0b15\u0b3e\u0b30\u0b40 \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b40 \u0b24\u0b25\u0b3e \u0b26\u0b47\u0b36\u0b30\u0b47 \u0b15\u0b47\u0b28\u0b4d\u0b26\u0b4d\u0b30 \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2c\u0b28\u0b3e\u0b2e \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b15\u0b3f\u0b2e\u0b4d\u0b2c\u0b3e \u0b17\u0b4b\u0b1f\u0b3f\u0b0f \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2c\u0b28\u0b3e\u0b2e \u0b05\u0b28\u0b4d\u0b5f \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2e\u0b27\u0b4d\u0b5f\u0b30\u0b47 \u0b2c\u0b3f\u0b2c\u0b3e\u0b26\u0b30 \u0b38\u0b2e\u0b3e\u0b27\u0b3e\u0b28 \u0b15\u0b30\u0b47 \u0b0f\u0b15 \u0b2a\u0b30\u0b3e\u0b2e\u0b30\u0b4d\u0b36\u0b26\u0b3e\u0b24\u0b3e \u0b39\u0b3f\u0b38\u0b3e\u0b2c\u0b30\u0b47, \u0b0f\u0b39\u0b3e \u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28 \u0b05\u0b28\u0b41\u0b38\u0b3e\u0b30\u0b47 \u0b30\u0b3e\u0b37\u0b4d\u0b1f\u0b4d\u0b30\u0b2a\u0b24\u0b3f\u0b19\u0b4d\u0b15\u0b26\u0b4d\u0b71\u0b3e\u0b30\u0b3e \u0b38\u0b42\u0b1a\u0b40\u0b24 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b2c\u0b3f\u0b37\u0b5f\u0b2c\u0b38\u0b4d\u0b24\u0b41 \u0b09\u0b2a\u0b30\u0b47 \u0b36\u0b41\u0b23\u0b3e\u0b23\u0b3f \u0b15\u0b30\u0b3f\u0b25\u0b3e\u0b0f' >>> wf . get_summary ( threshold = 3.0 ) # higher the threshold lesser the summary text '\u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b30\u0b4d\u0b2c\u0b4b\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f, \u0b2d\u0b3e\u0b30\u0b24\u0b30 \u0b09\u0b1a\u0b4d\u0b1a\u0b24\u0b2e \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3f\u0b15 \u0b05\u0b28\u0b41\u0b37\u0b4d\u0b20\u0b3e\u0b28 \u0b05\u0b1f\u0b47 \u0b0f\u0b2c\u0b02 \u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b38\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28 \u0b05\u0b27\u0b40\u0b28\u0b38\u0b4d\u0b25 \u0b38\u0b30\u0b4d\u0b2c\u0b4b\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b05\u0b1f\u0b47 \u0b0f\u0b39\u0b3e \u0b38\u0b30\u0b4d\u0b2c \u0b2c\u0b30\u0b3f\u0b37\u0b4d\u0b20 \u0b38\u0b3e\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28\u0b3f\u0b15 \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b05\u0b1f\u0b47 \u0b0f\u0b2c\u0b02 \u0b0f\u0b39\u0b3f \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3f\u0b15 \u0b2a\u0b41\u0b28\u0b30\u0b3e\u0b2c\u0b32\u0b4b\u0b15\u0b28\u0b30 \u0b15\u0b4d\u0b37\u0b2e\u0b24\u0b3e \u0b30\u0b39\u0b3f\u0b1b\u0b3f \u0b26\u0b47\u0b36\u0b30 \u0b38\u0b3e\u0b2e\u0b4d\u0b2c\u0b3f\u0b27\u0b3e\u0b28\u0b3f\u0b15 \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b39\u0b4b\u0b07\u0b25\u0b3f\u0b2c\u0b3e\u0b30\u0b41, \u0b0f\u0b39\u0b3e \u0b2e\u0b41\u0b16\u0b4d\u0b5f\u0b24\u0b03 \u0b38\u0b19\u0b4d\u0b18\u0b30 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b09\u0b1a\u0b4d\u0b1a \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b24\u0b25\u0b3e \u0b05\u0b28\u0b4d\u0b5f\u0b3e\u0b28\u0b4d\u0b5f \u0b28\u0b4d\u0b5f\u0b3e\u0b5f\u0b3e\u0b33\u0b5f \u0b13 \u0b1f\u0b4d\u0b30\u0b3f\u0b2c\u0b4d\u0b5f\u0b41\u0b28\u0b3e\u0b32\u0b2e\u0b3e\u0b28\u0b19\u0b4d\u0b15\u0b30 \u0b30\u0b3e\u0b5f \u0b2c\u0b3f\u0b30\u0b41\u0b26\u0b4d\u0b27\u0b30\u0b47 \u0b05\u0b2a\u0b3f\u0b32\u0b4d \u0b28\u0b3f\u0b0f \u0b0f\u0b39\u0b3e \u0b28\u0b3e\u0b17\u0b30\u0b3f\u0b15\u0b2e\u0b3e\u0b28\u0b19\u0b4d\u0b15\u0b30 \u0b2e\u0b4c\u0b33\u0b3f\u0b15 \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b30 \u0b30\u0b15\u0b4d\u0b37\u0b3e\u0b15\u0b30\u0b47 \u0b0f\u0b2c\u0b02 \u0b2c\u0b3f\u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b38\u0b30\u0b15\u0b3e\u0b30\u0b40 \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b30\u0b40 \u0b24\u0b25\u0b3e \u0b26\u0b47\u0b36\u0b30\u0b47 \u0b15\u0b47\u0b28\u0b4d\u0b26\u0b4d\u0b30 \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2c\u0b28\u0b3e\u0b2e \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b15\u0b3f\u0b2e\u0b4d\u0b2c\u0b3e \u0b17\u0b4b\u0b1f\u0b3f\u0b0f \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2c\u0b28\u0b3e\u0b2e \u0b05\u0b28\u0b4d\u0b5f \u0b30\u0b3e\u0b1c\u0b4d\u0b5f \u0b38\u0b30\u0b15\u0b3e\u0b30 \u0b2e\u0b27\u0b4d\u0b5f\u0b30\u0b47 \u0b2c\u0b3f\u0b2c\u0b3e\u0b26\u0b30 \u0b38\u0b2e\u0b3e\u0b27\u0b3e\u0b28 \u0b15\u0b30\u0b47'","title":" Automatic extractive text summarization"},{"location":"#offline-dictionary","text":"An offline dictionary will be downloaded as soon as you install this library. Therefore, when you translate from English to Odia words/phrases it will hit the offline dictionary first, if not found it will go for the Google translate API. Google Translate API responses have been cached, therefore from the 2 nd call onwards on the same term(s) it will fetch fast from the local in-memory cache. We have used LRU (Least Recently Used) cache with a maximum size of 10000. English to Odia translation Workflow Therefore, we have two flows on English to Odia dictionary translation: English text \u2192 Check in Offline dictionary \u2192 Found \u2192 Return result English text \u2192 Check in Offline dictionary \u2192 Not Found \u2192 Check in Cache \u2192 Found \u2192 Return result from Cache English text \u2192 Check in Offline dictionary \u2192 Not Found \u2192 Check in Cache \u2192 Not Found \u2192 Hit Google Translate API \u2192 Update the Cache \u2192 Return result","title":"Offline Dictionary"},{"location":"#known-issues","text":"There are few issues in the code an be found here . Contributions are highly welcomed. Quote \"In my dream of the 21 st century for the State, I would have young men and women who put the interest of the State before them. They will have pride in themselves, confidence in themselves. They will not be at anybody\u2019s mercy, except their own selves. By their brains, intelligence and capacity, they will recapture the history of Kalinga.\" - Biju Pattnaik To cite this page, please use: @misc { OpenOdia , author = {Soumendra Kumar Sahoo} , title = {OpenOdia Documentation} , howpublished = {\\url{https://www.openodia.soumendrak.com/}} , year = {2021} }","title":"Known Issues"}]}